{"ast":null,"code":"var _jsxFileName = \"/Users/gigizhou/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortingAlgorithms/mergeSortAlgorithm.js';\nimport { getQuickSortAnimations } from '../sortingAlgorithms/quickSortAlgorithm.js';\nimport { getBubbleSortAnimations } from '../sortingAlgorithms/bubbleSortAlgorithm.js';\nimport './SortingVisualizer.css'; // Change this value for the speed of the animations.\n\nconst ANIMATION_SPEED_MS = 100; // Change this value for the number of bars (value) in the array.\n\nconst NUMBER_OF_ARRAY_BARS = 5; // This is the main color of the array bars.\n\nconst PRIMARY_COLOR = 'turquoise'; // This is the color of array bars that are being compared throughout the animations.\n\nconst SECONDARY_COLOR = 'red';\nconst PIVOT_COLOR = 'purple';\nconst SMALLER_COLOR = 'blue';\nconst GREATER_COLOR = 'yellow';\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: []\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx, changeColor] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = changeColor === true ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    var quickAnimation;\n    let i = 0;\n\n    for (quickAnimation of animations) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const barOneIdx = quickAnimation[0];\n      const barTwoIdx = quickAnimation[1];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n\n      if (quickAnimation.length === 3) {\n        const color = quickAnimation[2] === true ? SMALLER_COLOR : GREATER_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = PIVOT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n      } else {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        const barOneNewHeight = quickAnimation[2];\n        const barTwoNewHeight = quickAnimation[3];\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n      }\n    }\n  }\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    var bubbleAnimation;\n    let i = 0;\n\n    for (bubbleAnimation of animations) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const barOneIdx = bubbleAnimation[0];\n      const barTwoIdx = bubbleAnimation[1];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      setTimeout(() => {\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\n        barTwoStyle.backgroundColor = SECONDARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n      i++;\n\n      if (bubbleAnimation.length > 2) {\n        const barOneNewHeight = bubbleAnimation[2];\n        const barTwoNewHeight = bubbleAnimation[3];\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PIVOT_COLOR;\n          barTwoStyle.backgroundColor = PIVOT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n      }\n\n      setTimeout(() => {\n        barOneStyle.backgroundColor = PRIMARY_COLOR;\n        barTwoStyle.backgroundColor = PRIMARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n      i++;\n    }\n  } // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n\n\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 7\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSort(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testSortingAlgorithms(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }\n    }, \"Test Sorting Algorithms (BROKEN)\"));\n  }\n\n} // From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\n\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/gigizhou/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getQuickSortAnimations","getBubbleSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","PIVOT_COLOR","SMALLER_COLOR","GREATER_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntFromInterval","setState","mergeSort","animations","length","arrayBars","document","getElementsByClassName","isColorChange","barOneIdx","barTwoIdx","changeColor","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSort","quickAnimation","barOneNewHeight","barTwoNewHeight","bubbleSort","bubbleAnimation","testSortingAlgorithms","javaScriptSortedArray","slice","sort","a","b","mergeSortedArray","console","log","arraysAreEqual","render","map","value","idx","min","max","Math","floor","random","arrayOne","arrayTwo"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortingAlgorithms/mergeSortAlgorithm.js';\nimport {getQuickSortAnimations} from '../sortingAlgorithms/quickSortAlgorithm.js';\nimport {getBubbleSortAnimations} from '../sortingAlgorithms/bubbleSortAlgorithm.js';\nimport './SortingVisualizer.css';\n\n// Change this value for the speed of the animations.\nconst ANIMATION_SPEED_MS = 100;\n\n// Change this value for the number of bars (value) in the array.\nconst NUMBER_OF_ARRAY_BARS = 5;\n\n// This is the main color of the array bars.\nconst PRIMARY_COLOR = 'turquoise';\n\n// This is the color of array bars that are being compared throughout the animations.\nconst SECONDARY_COLOR = 'red';\n\nconst PIVOT_COLOR = 'purple';\n\nconst SMALLER_COLOR = 'blue';\nconst GREATER_COLOR = 'yellow';\n\nexport default class SortingVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      array: [],\n    };\n  }\n\n  componentDidMount() {\n    this.resetArray();\n  }\n\n  resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(5, 730));\n    }\n    this.setState({array});\n  }\n\n  mergeSort() {\n    const animations = getMergeSortAnimations(this.state.array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx,changeColor] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = changeColor === true ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n  \n\n\n  quickSort() {\n    const animations = getQuickSortAnimations(this.state.array);\n    var quickAnimation;\n    let i = 0;\n    for (quickAnimation of animations) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const barOneIdx = quickAnimation[0];\n      const barTwoIdx = quickAnimation[1];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      if (quickAnimation.length === 3) {\n        const color = quickAnimation[2] === true ? SMALLER_COLOR : GREATER_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = PIVOT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n      } else {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = SECONDARY_COLOR;\n          barTwoStyle.backgroundColor = SECONDARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        const barOneNewHeight = quickAnimation[2];\n        const barTwoNewHeight = quickAnimation[3];\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n      }\n    }\n  }\n\n\n  bubbleSort() {\n    const animations = getBubbleSortAnimations(this.state.array);\n    var bubbleAnimation;\n    let i = 0;\n    for (bubbleAnimation of animations) {\n      const arrayBars = document.getElementsByClassName('array-bar');\n      const barOneIdx = bubbleAnimation[0];\n      const barTwoIdx = bubbleAnimation[1];\n      const barOneStyle = arrayBars[barOneIdx].style;\n      const barTwoStyle = arrayBars[barTwoIdx].style;\n      setTimeout(() => {\n        barOneStyle.backgroundColor = SECONDARY_COLOR;\n        barTwoStyle.backgroundColor = SECONDARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n      i++;\n      if (bubbleAnimation.length >2) {\n        const barOneNewHeight = bubbleAnimation[2];\n        const barTwoNewHeight = bubbleAnimation[3];\n        setTimeout(() => {\n          barOneStyle.backgroundColor = PIVOT_COLOR;\n          barTwoStyle.backgroundColor = PIVOT_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n        setTimeout(() => {\n          barOneStyle.height = `${barOneNewHeight}px`;\n          barTwoStyle.height = `${barTwoNewHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n        i++;\n      }\n      setTimeout(() => {\n        barOneStyle.backgroundColor = PRIMARY_COLOR;\n        barTwoStyle.backgroundColor = PRIMARY_COLOR;\n      }, i * ANIMATION_SPEED_MS);\n      i++;\n    }\n  }\n\n  // NOTE: This method will only work if your sorting algorithms actually return\n  // the sorted arrays; if they return the animations (as they currently do), then\n  // this method will be broken.\n  testSortingAlgorithms() {\n    for (let i = 0; i < 100; i++) {\n      const array = [];\n      const length = randomIntFromInterval(1, 1000);\n      for (let i = 0; i < length; i++) {\n        array.push(randomIntFromInterval(-1000, 1000));\n      }\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\n    }\n  }\n\n  render() {\n    const {array} = this.state;\n\n    return (\n      <div className=\"array-container\">\n        {array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n              backgroundColor: PRIMARY_COLOR,\n              height: `${value}px`,\n            }}></div>\n        ))}\n        <button onClick={() => this.resetArray()}>Generate New Array</button>\n        <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        <button onClick={() => this.quickSort()}>Quick Sort</button>\n        <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        <button onClick={() => this.testSortingAlgorithms()}>\n          Test Sorting Algorithms (BROKEN)\n        </button>\n      </div>\n    );\n  }\n}\n\n// From https://stackoverflow.com/questions/4959975/generate-random-number-between-two-numbers-in-javascript\nfunction randomIntFromInterval(min, max) {\n  // min and max included\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nfunction arraysAreEqual(arrayOne, arrayTwo) {\n  if (arrayOne.length !== arrayTwo.length) return false;\n  for (let i = 0; i < arrayOne.length; i++) {\n    if (arrayOne[i] !== arrayTwo[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n"]},"metadata":{},"sourceType":"module"}