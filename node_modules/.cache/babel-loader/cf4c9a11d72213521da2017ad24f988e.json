{"ast":null,"code":"export function getQuickSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  quickSortHelper(array, 0, array.length - 1, animations);\n  return animations;\n}\n\nfunction quickSortHelper(array, lowIdx, highIdx, animations) {\n  let pivot = lowIdx;\n\n  if (highIdx > lowIdx) {\n    pivot = Partition(array, lowIdx, highIdx, animations);\n    quickSortHelper(array, lowIdx, pivot - 1, animations);\n    quickSortHelper(array, pivot + 1, highIdx, animations);\n  }\n}\n\nfunction Partition(array, lowIdx, highIdx, animations) {\n  let pivot_item = array[lowIdx];\n  let left = lowIdx;\n  let right = highIdx;\n\n  while (left < right) {\n    while (array[left] <= pivot_item) {\n      animations.push([left, lowIdx, true]);\n      left++;\n    }\n\n    while (array[right] > pivot_item) {\n      animations.push([right, lowIdx, false]);\n      right--;\n    }\n\n    if (left < right) {\n      animations.push([left, right, array[right], array[left]]);\n      let temp = array[right];\n      array[right] = array[left];\n      array[left] = temp;\n    }\n  }\n\n  animations.push([lowIdx, right, array[right], pivot_item]);\n  array[lowIdx] = array[right];\n  array[right] = pivot_item;\n  return right;\n}","map":{"version":3,"sources":["/Users/gigizhou/Desktop/sorting-visualizer/src/sortingAlgorithms/quickSortAlgorithm.js"],"names":["getQuickSortAnimations","array","animations","length","quickSortHelper","lowIdx","highIdx","pivot","Partition","pivot_item","left","right","push","temp"],"mappings":"AAAA,OAAO,SAASA,sBAAT,CAAgCC,KAAhC,EAAuC;AAC1C,QAAMC,UAAU,GAAG,EAAnB;AACA,MAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB,OAAOF,KAAP;AACvBG,EAAAA,eAAe,CAACH,KAAD,EAAQ,CAAR,EAAWA,KAAK,CAACE,MAAN,GAAe,CAA1B,EAA6BD,UAA7B,CAAf;AACA,SAAOA,UAAP;AACH;;AACD,SAASE,eAAT,CACIH,KADJ,EAEII,MAFJ,EAGIC,OAHJ,EAIIJ,UAJJ,EAKC;AACG,MAAIK,KAAK,GAAGF,MAAZ;;AACA,MAAIC,OAAO,GAAGD,MAAd,EAAqB;AACjBE,IAAAA,KAAK,GAAGC,SAAS,CAACP,KAAD,EAAOI,MAAP,EAAcC,OAAd,EAAsBJ,UAAtB,CAAjB;AACAE,IAAAA,eAAe,CAACH,KAAD,EAAOI,MAAP,EAAcE,KAAK,GAAC,CAApB,EAAsBL,UAAtB,CAAf;AACAE,IAAAA,eAAe,CAACH,KAAD,EAAOM,KAAK,GAAC,CAAb,EAAeD,OAAf,EAAuBJ,UAAvB,CAAf;AACH;AACJ;;AAED,SAASM,SAAT,CACIP,KADJ,EAEII,MAFJ,EAGIC,OAHJ,EAIIJ,UAJJ,EAKC;AACG,MAAIO,UAAU,GAAGR,KAAK,CAACI,MAAD,CAAtB;AACA,MAAIK,IAAI,GAAGL,MAAX;AACA,MAAIM,KAAK,GAAGL,OAAZ;;AACA,SAAOI,IAAI,GAAGC,KAAd,EAAoB;AAChB,WAAOV,KAAK,CAACS,IAAD,CAAL,IAAeD,UAAtB,EAAiC;AAC7BP,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACF,IAAD,EAAOL,MAAP,EAAe,IAAf,CAAhB;AACAK,MAAAA,IAAI;AACP;;AACD,WAAOT,KAAK,CAACU,KAAD,CAAL,GAAeF,UAAtB,EAAiC;AAC7BP,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACD,KAAD,EAAQN,MAAR,EAAgB,KAAhB,CAAhB;AACAM,MAAAA,KAAK;AACR;;AACD,QAAID,IAAI,GAACC,KAAT,EAAe;AACXT,MAAAA,UAAU,CAACU,IAAX,CAAgB,CAACF,IAAD,EAAMC,KAAN,EAAYV,KAAK,CAACU,KAAD,CAAjB,EAAyBV,KAAK,CAACS,IAAD,CAA9B,CAAhB;AACA,UAAIG,IAAI,GAAGZ,KAAK,CAACU,KAAD,CAAhB;AACAV,MAAAA,KAAK,CAACU,KAAD,CAAL,GAAeV,KAAK,CAACS,IAAD,CAApB;AACAT,MAAAA,KAAK,CAACS,IAAD,CAAL,GAAcG,IAAd;AACH;AACJ;;AACDX,EAAAA,UAAU,CAACU,IAAX,CAAgB,CAACP,MAAD,EAAQM,KAAR,EAAcV,KAAK,CAACU,KAAD,CAAnB,EAA2BF,UAA3B,CAAhB;AACAR,EAAAA,KAAK,CAACI,MAAD,CAAL,GAAgBJ,KAAK,CAACU,KAAD,CAArB;AACAV,EAAAA,KAAK,CAACU,KAAD,CAAL,GAAeF,UAAf;AACA,SAAOE,KAAP;AACH","sourcesContent":["export function getQuickSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    quickSortHelper(array, 0, array.length - 1, animations);\n    return animations;\n}\nfunction quickSortHelper(\n    array,\n    lowIdx,\n    highIdx,\n    animations,\n){\n    let pivot = lowIdx;\n    if (highIdx > lowIdx){\n        pivot = Partition(array,lowIdx,highIdx,animations);\n        quickSortHelper(array,lowIdx,pivot-1,animations);\n        quickSortHelper(array,pivot+1,highIdx,animations);\n    }\n}\n\nfunction Partition(\n    array,\n    lowIdx,\n    highIdx,\n    animations,\n){\n    let pivot_item = array[lowIdx];\n    let left = lowIdx;\n    let right = highIdx;\n    while (left < right){\n        while (array[left] <= pivot_item){\n            animations.push([left, lowIdx, true]);\n            left++;\n        }\n        while (array[right] > pivot_item){\n            animations.push([right, lowIdx, false]);\n            right--;\n        }\n        if (left<right){\n            animations.push([left,right,array[right],array[left]]);\n            let temp = array[right];\n            array[right] = array[left];\n            array[left] = temp;\n        }\n    }\n    animations.push([lowIdx,right,array[right],pivot_item]);\n    array[lowIdx] = array[right];\n    array[right] = pivot_item;\n    return right;\n}\n"]},"metadata":{},"sourceType":"module"}